import socket
from cv2 import threshold
import numpy as np
import time
from PIL import Image
import cv2 as cv
import cv2

import argparse
# import imutils
import math
from collections import defaultdict
import argparse
from math import atan2, cos, sin, sqrt, pi
# from sklearn.cluster import KMeans

from numpy import loadtxt
from numpy import savetxt

import matplotlib.pyplot as plt

import sys

import os

model0 = np.array([[  0,   0,   0,  12,  83, 141, 165, 170, 162, 143, 114,  60,   6,  0,   0,   0],
         [  0,   0,  76, 222, 254, 255, 255, 255, 255, 254, 249, 234, 169,  36,   0,   0],
         [  0,  77, 242, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 210,  37,   0],
         [ 18, 216, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 188,   5],
         [ 97, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252,  69],
         [163, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 147],
         [189, 255, 255, 255, 254, 246, 254, 255, 255, 255, 245, 253, 255, 255, 255, 182],
         [177, 255, 255, 255, 252, 251, 255, 255, 255, 255, 229, 252, 255, 255, 255, 190],
         [112, 250, 255, 254, 255, 255, 255, 255, 255, 255, 230, 247, 255, 255, 255, 161],
         [ 47, 168, 214, 215, 240, 255, 255, 255, 255, 255, 236, 248, 254, 254, 227, 100],
         [ 11,  94, 121, 127, 190, 254, 255, 255, 255, 255, 230, 207, 190, 189, 149,  41],
         [  0,  28,  75,  74, 121, 239, 255, 255, 255, 253, 204, 116, 103, 105,  90,   8],
         [  0,   0,   1,   6,  73, 217, 255, 255, 255, 246, 181,  77,  81,  86,  37,   0],
         [  0,   1,   0,   0,  33, 173, 253, 255, 255, 238, 145,  41,  38,  29,   1,   0],
         [  0,   0,   0,   0,  17,  90, 192, 236, 254, 232, 124,   8,   0,   0,   0,   0],
         [  0,   4,   0,   0,   1,  27,  66,  70,  95, 109,  40,   0,   0,   0,   0,   0]])
model45 = np.array([[  0,   0,   8,  65, 144, 183, 179, 138,  78,  30,   2,   0,   0,   0,   0,   0],
         [  1,  37, 151, 243, 255, 255, 255, 254, 235, 170,  80,  15,   0,   0,   0,   0],
         [ 24, 147, 224, 255, 255, 255, 255, 255, 255, 252, 208, 104,  16,   0,   0,   0],
         [ 87, 167, 235, 255, 255, 255, 255, 255, 255, 255, 254, 226, 104,   5,   0,   0],
         [103, 163, 217, 250, 255, 255, 255, 255, 255, 255, 255, 255, 228,  75,   0,   0],
         [ 73, 136, 187, 226, 250, 253, 244, 255, 255, 255, 255, 255, 255, 214,  28,   0],
         [ 19,  86, 144, 237, 254, 245, 248, 253, 255, 255, 255, 255, 255, 255, 152,   1],
         [  9,  47, 172, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 246,  40],
         [ 33,  86, 204, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 125],
         [ 48, 175, 237, 255, 255, 255, 255, 255, 255, 253, 254, 255, 255, 255, 255, 183],
         [ 36, 209, 246, 255, 255, 255, 255, 255, 244, 223, 240, 255, 255, 255, 255, 194],
         [ 20, 132, 225, 254, 255, 255, 255, 241, 218, 223, 248, 255, 255, 255, 255, 158],
         [  2,  92, 165, 225, 254, 241, 213, 214, 230, 241, 255, 255, 255, 255, 249,  74],
         [  4,  49,  97, 130, 143, 132,  90, 103, 201, 226, 253, 255, 255, 251, 169,   4],
         [  1,   4,  33,  46,  45,  31,   4,  44, 140, 205, 222, 237, 235, 162,  16,   0],
         [  0,   0,  11,   2,  16,   2,   0,   4,  43, 106, 140, 129,  62,   3,   0,   0]])

def generateModel(model0, model45):
    models = [model0, model45]
    models.append(np.rot90(model0, 3))
    models.append(np.rot90(model45, 3))
    models.append(np.rot90(model0, 2))
    models.append(np.rot90(model45, 2))
    models.append(np.rot90(model0))
    models.append(np.rot90(model45))

    return models

models = generateModel(model0, model45)

data = []
predicts = []

def detect(image, test = False):
    image_np = image.astype(np.int32)
    min = 1000000
    ori = 0
    for j in range(8):
        sam = models[j]

        dist = np.linalg.norm(sam - image_np)

        if dist < min:
            min = dist
            ori = j * 1.5
    return ori

def GetAngle(value):
    return value * 30